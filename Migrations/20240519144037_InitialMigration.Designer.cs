// <auto-generated />
using System;
using IPSMDB.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace IPSMDB.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240519144037_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("IPSMDB.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<int?>("PersonId")
                        .HasColumnType("integer");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AppUsers");
                });

            modelBuilder.Entity("IPSMDB.Models.CustomerReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FoodPlaceId")
                        .HasColumnType("integer");

                    b.Property<int>("FoodQuality")
                        .HasColumnType("integer");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.Property<int>("ServiceKindness")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FoodPlaceId");

                    b.HasIndex("PersonId");

                    b.ToTable("CustomerReview");
                });

            modelBuilder.Entity("IPSMDB.Models.FoodPlace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FoodPlaceCategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FoodPlaceCategoryId");

                    b.HasIndex("PersonId");

                    b.ToTable("FoodPlace");
                });

            modelBuilder.Entity("IPSMDB.Models.FoodPlaceCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FoodPlaceCategory");
                });

            modelBuilder.Entity("IPSMDB.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FoodPlaceId")
                        .HasColumnType("integer");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FoodPlaceId");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("IPSMDB.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PhoneNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("IPSMDB.Models.PersonFriendship", b =>
                {
                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.Property<int>("FriendId")
                        .HasColumnType("integer");

                    b.HasKey("PersonId", "FriendId");

                    b.HasIndex("FriendId");

                    b.ToTable("PersonFriendship");
                });

            modelBuilder.Entity("IPSMDB.Models.ServiceReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerKindness")
                        .HasColumnType("integer");

                    b.Property<int>("FoodPlaceId")
                        .HasColumnType("integer");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FoodPlaceId");

                    b.HasIndex("PersonId");

                    b.ToTable("ServiceReview");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("IPSMDB.Models.CustomerReview", b =>
                {
                    b.HasOne("IPSMDB.Models.FoodPlace", "FoodPlace")
                        .WithMany("ReviewsReceived")
                        .HasForeignKey("FoodPlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IPSMDB.Models.Person", "Person")
                        .WithMany("ReviewsWritten")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FoodPlace");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("IPSMDB.Models.FoodPlace", b =>
                {
                    b.HasOne("IPSMDB.Models.FoodPlaceCategory", "FoodPlaceCategory")
                        .WithMany("FoodPlaces")
                        .HasForeignKey("FoodPlaceCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IPSMDB.Models.Person", "Person")
                        .WithMany("FoodPlaces")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FoodPlaceCategory");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("IPSMDB.Models.Location", b =>
                {
                    b.HasOne("IPSMDB.Models.FoodPlace", "FoodPlace")
                        .WithMany("Locations")
                        .HasForeignKey("FoodPlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FoodPlace");
                });

            modelBuilder.Entity("IPSMDB.Models.PersonFriendship", b =>
                {
                    b.HasOne("IPSMDB.Models.Person", "Friend")
                        .WithMany()
                        .HasForeignKey("FriendId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IPSMDB.Models.Person", "Person")
                        .WithMany("PersonFriendships")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Friend");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("IPSMDB.Models.ServiceReview", b =>
                {
                    b.HasOne("IPSMDB.Models.FoodPlace", "FoodPlace")
                        .WithMany("ReviewsWritten")
                        .HasForeignKey("FoodPlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IPSMDB.Models.Person", "Person")
                        .WithMany("ReviewsReceived")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FoodPlace");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("IPSMDB.Models.FoodPlace", b =>
                {
                    b.Navigation("Locations");

                    b.Navigation("ReviewsReceived");

                    b.Navigation("ReviewsWritten");
                });

            modelBuilder.Entity("IPSMDB.Models.FoodPlaceCategory", b =>
                {
                    b.Navigation("FoodPlaces");
                });

            modelBuilder.Entity("IPSMDB.Models.Person", b =>
                {
                    b.Navigation("FoodPlaces");

                    b.Navigation("PersonFriendships");

                    b.Navigation("ReviewsReceived");

                    b.Navigation("ReviewsWritten");
                });
#pragma warning restore 612, 618
        }
    }
}
